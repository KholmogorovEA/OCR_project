import httpx
import hashlib
import json
import smtplib
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.tasks.celery import celery
from app.sql.model import Case, Subscription
from app.database import sessionmaker
from app.bot.bot import send_telegram_message
# from app.tasks.emil_template import send_to_email



engine = create_engine("sqlite:///./cases.db")    # env
Session = sessionmaker(bind=engine)


def get_case_data(case_number: str):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å kad.arbitr.ru
    """
    try:
        url = "https://parser-api.com/parser/arbitr_api/run.php"  # URL API
        params = {
            "key": "ccf3ce57f02f0326399fadda323ac14b",  # API –∫–ª—é—á
            "CaseNumber": case_number
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = httpx.get(url, params=params)
        response.raise_for_status()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
        data = response.json()

        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ
        print("\n--- –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–ª–∞ ---")
        print(f"–ù–æ–º–µ—Ä –¥–µ–ª–∞: {case_number}")
        # print(json.dumps(data, indent=4, ensure_ascii=False))
        print("\n--- –ö–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö ---")

        return data

    except httpx.HTTPStatusError as e:
        print(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")



@celery.task
def track_case(case_number: str):
    db = Session()
    try:
        data = get_case_data(case_number)
        state_hash = hashlib.md5(json.dumps(data, sort_keys=True).encode()).hexdigest()
        
        case = db.query(Case).filter(Case.case_number == case_number).first() # type: ignore
        case.last_data = data # type: ignore
        case.state_hash = state_hash # type: ignore
        db.commit()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()



@celery.task
def check_all_cases():
    db = Session()
    try:
        cases = db.query(Case).filter(Case.is_active == True).all()
        for case in cases:
            current_hash = case.state_hash
            new_data = get_case_data(case.case_number)  # type: ignore # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            new_hash = hashlib.md5(json.dumps(new_data, sort_keys=True).encode()).hexdigest()
            
            if new_hash != current_hash:
                print(f"–•—ç—à –∏–∑–º–µ–Ω–∏–ª—Å—è –¥–ª—è –¥–µ–ª–∞ {case.case_number}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                case.last_data = new_data # type: ignore
                case.state_hash = new_hash # type: ignore
                db.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                subscriptions = db.query(Subscription).filter(Subscription.case_id == case.id).all()
                for sub in subscriptions:
                    print(sub)
                    send_telegram_message.delay( # type: ignore
                        message=f"üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–µ–ª–µ {case.case_number}!\n"
                               f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_data.get('State', '–Ω–µ —É–∫–∞–∑–∞–Ω')}" # type: ignore
                    )
                    # emails_to_notify = ["demchukrus@gmail.com", "bykholmogoro@gmail.com"]
                    # for email in emails_to_notify:
                    #     send_confirmation_case.delay(email, new_data) # type: ignore
            else:
                print(f"–•—ç—à –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –¥–ª—è –¥–µ–ª–∞ {case.case_number}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–ª: {str(e)}")
    finally:
        db.close()
            
  

# @celery.task
# def send_confirmation_case(email_to: EmailStr, case_data: dict):
#     """
#     –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–µ–ª–µ.

#     :param email_to: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
#     :param case_data: –î–∞–Ω–Ω—ã–µ –æ –¥–µ–ª–µ.
#     """
#     try:
#         # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ
#         msg_content = send_to_email(case_data, email_to)

#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ SMTP
#         with smtplib.SMTP_SSL(settings.SMTP_HOST, settings.SMTP_PORT) as server:
#             server.login(settings.SMTP_USER, settings.SMTP_PASS)
#             server.send_message(msg_content)
#             print(f"Email confirmation sent to {email_to}.")
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –Ω–∞ {email_to}: {str(e)}")
    